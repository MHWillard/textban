<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:textban.ViewModels"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Width="300" Height="500" Padding="4"
        x:Class="textban.Views.MainWindow"
        x:DataType="vm:MainViewModel"
        Icon="/Assets/avalonia-logo.ico"
        Title="textban">

    <Design.DataContext>
        <!-- This only sets the DataContext for the previewer in an IDE,
             to set the actual DataContext for runtime, set the DataContext property in code (look at App.axaml.cs) -->
        <vm:MainViewModel />
    </Design.DataContext>

	<DockPanel>
		<TextBlock Text="Textban" Classes="h1" VerticalAlignment="Top" DockPanel.Dock="Top"/>

		<!-- This TextBox can be used to add new ToDoItems -->
		<StackPanel VerticalAlignment="Bottom" DockPanel.Dock="Bottom">
			<TextBox Grid.Row="2"
					 Text="{Binding NewItemContent}"
					 Watermark="Add a new Item">
				<TextBox.InnerRightContent>
					<Button Command="{Binding AddItemCommand}">
						<PathIcon Data="{DynamicResource AcceptIconData}"
								  Foreground="Green" />
					</Button>
				</TextBox.InnerRightContent>
				<!-- KeyBindings allow us to define KeyGestures  -->
				<TextBox.KeyBindings>
					<KeyBinding Gesture="Enter" Command="{Binding AddItemCommand}" />
				</TextBox.KeyBindings>
			</TextBox>
		</StackPanel>

		<!-- We give a name to the root grid in order to access it later -->
		<Grid RowDefinitions="Auto, *, Auto"
			  x:Name="Root">

			<!-- This is our title text block. We use Style.Classes to style it accordingly -->


			<ScrollViewer VerticalScrollBarVisibility="Auto">
				<StackPanel Height="420">

					<Expander MinWidth="290">
						<Expander.Header>
							Ready
						</Expander.Header>
						<Grid>
							<ScrollViewer Grid.Row="1">
								<!-- This ItemsControl show all added ToDoItems. -->
								<!-- It needs to be placed inside a ScrollViewer because other than a ListBox it has not its own -->
								<ItemsControl ItemsSource="{Binding ReadyItems}">
									<ItemsControl.ItemTemplate>
										<!-- The ItemTemplate defines how each item should be represented -->
										<!-- Our Item will be represented by a CheckBox and a Delete-Button -->
										<DataTemplate DataType="vm:ToDoItemViewModel">
											<Grid ColumnDefinitions="*, Auto">
												<CheckBox IsChecked="{Binding IsChecked}"
														  Content="{Binding Content}" />

												<!-- Note how we use the Root-Grid to get the MainViewModel here. As we use compiled bindings we have to cast the DataContext -->
												<!-- The command parameter is the local ToDoItemViewModel being processed -->
												<Button Grid.Column="1"
														Command="{Binding #Root.((vm:MainViewModel)DataContext).RemoveItemCommand}"
														CommandParameter="{Binding .}">
													<PathIcon Data="{DynamicResource DeleteIconData}"
															  Height="15"
															  Foreground="Red" />
												</Button>
											</Grid>
										</DataTemplate>
									</ItemsControl.ItemTemplate>
								</ItemsControl>
							</ScrollViewer>
						</Grid>
					</Expander>

					<Expander MinWidth="290">
						<Expander.Header>
							Waiting
						</Expander.Header>
						<Grid>
							<ScrollViewer Grid.Row="1">
								<!-- This ItemsControl show all added ToDoItems. -->
								<!-- It needs to be placed inside a ScrollViewer because other than a ListBox it has not its own -->
								<ItemsControl ItemsSource="{Binding WaitingItems}">
									<ItemsControl.ItemTemplate>
										<!-- The ItemTemplate defines how each item should be represented -->
										<!-- Our Item will be represented by a CheckBox and a Delete-Button -->
										<DataTemplate DataType="vm:ToDoItemViewModel">
											<Grid ColumnDefinitions="*, Auto">
												<CheckBox IsChecked="{Binding IsChecked}"
														  Content="{Binding Content}" />

												<!-- Note how we use the Root-Grid to get the MainViewModel here. As we use compiled bindings we have to cast the DataContext -->
												<!-- The command parameter is the local ToDoItemViewModel being processed -->
												<Button Grid.Column="1"
														Command="{Binding #Root.((vm:MainViewModel)DataContext).RemoveItemCommand}"
														CommandParameter="{Binding .}">
													<PathIcon Data="{DynamicResource DeleteIconData}"
															  Height="15"
															  Foreground="Red" />
												</Button>
											</Grid>
										</DataTemplate>
									</ItemsControl.ItemTemplate>
								</ItemsControl>
							</ScrollViewer>
						</Grid>
					</Expander>

					<Expander MinWidth="290">
						<Expander.Header>
							Backlog
						</Expander.Header>
						<Grid>
							<ScrollViewer Grid.Row="1">
								<!-- This ItemsControl show all added ToDoItems. -->
								<!-- It needs to be placed inside a ScrollViewer because other than a ListBox it has not its own -->
								<ItemsControl ItemsSource="{Binding ToDoItems}">
									<ItemsControl.ItemTemplate>
										<!-- The ItemTemplate defines how each item should be represented -->
										<!-- Our Item will be represented by a CheckBox and a Delete-Button -->
										<DataTemplate DataType="vm:ToDoItemViewModel">
											<Grid ColumnDefinitions="*, Auto">
												<CheckBox IsChecked="{Binding IsChecked}"
														  Content="{Binding Content}" />

												<!-- Note how we use the Root-Grid to get the MainViewModel here. As we use compiled bindings we have to cast the DataContext -->
												<!-- The command parameter is the local ToDoItemViewModel being processed -->
												<Button Grid.Column="1"
														Command="{Binding #Root.((vm:MainViewModel)DataContext).RemoveItemCommand}"
														CommandParameter="{Binding .}">
													<PathIcon Data="{DynamicResource DeleteIconData}"
															  Height="15"
															  Foreground="Red" />
												</Button>
											</Grid>
										</DataTemplate>
									</ItemsControl.ItemTemplate>
								</ItemsControl>
							</ScrollViewer>
						</Grid>
					</Expander>

					<Expander MinWidth="290">
						<Expander.Header>
							Done
						</Expander.Header>
						<Grid>
							<ScrollViewer Grid.Row="1">
								<!-- This ItemsControl show all added ToDoItems. -->
								<!-- It needs to be placed inside a ScrollViewer because other than a ListBox it has not its own -->
								<ItemsControl ItemsSource="{Binding DoneItems}">
									<ItemsControl.ItemTemplate>
										<!-- The ItemTemplate defines how each item should be represented -->
										<!-- Our Item will be represented by a CheckBox and a Delete-Button -->
										<DataTemplate DataType="vm:ToDoItemViewModel">
											<Grid ColumnDefinitions="*, Auto">
												<CheckBox IsChecked="{Binding IsChecked}"
														  Content="{Binding Content}" />

												<!-- Note how we use the Root-Grid to get the MainViewModel here. As we use compiled bindings we have to cast the DataContext -->
												<!-- The command parameter is the local ToDoItemViewModel being processed -->
												<Button Grid.Column="1"
														Command="{Binding #Root.((vm:MainViewModel)DataContext).RemoveItemCommand}"
														CommandParameter="{Binding .}">
													<PathIcon Data="{DynamicResource DeleteIconData}"
															  Height="15"
															  Foreground="Red" />
												</Button>
											</Grid>
										</DataTemplate>
									</ItemsControl.ItemTemplate>
								</ItemsControl>
							</ScrollViewer>
						</Grid>
					</Expander>

					<DockPanel LastChildFill="True" Margin="20">
						<StackPanel Orientation="Vertical" DockPanel.Dock="Top">
							<TextBlock>
								<Run FontWeight="Bold">Status:</Run>
								<Run Name="DropState" />
							</TextBlock>
							<TextBlock>
								<Run FontWeight="Bold">State:</Run>
								<Run Name="DragState" />
							</TextBlock>
						</StackPanel>

						<StackPanel x:Name="myStackPanel">

							<DockPanel LastChildFill="True" Margin="20">

								<Grid RowDefinitions="*,*" ColumnDefinitions="*,*">
									<Grid.Styles>
										<Style Selector="Border.drag">
											<Setter Property="Background" Value="Gray" />
										</Style>
										<Style Selector="Border.drop">
											<Setter Property="Background" Value="Yellow" />
										</Style>
										<Style Selector="Border">
											<Setter Property="MaxWidth" Value="200" />
											<Setter Property="MaxHeight" Value="200" />
											<Setter Property="CornerRadius" Value="10" />
										</Style>
										<Style Selector="TextBlock">
											<Setter Property="VerticalAlignment" Value="Center" />
											<Setter Property="HorizontalAlignment" Value="Center" />
										</Style>
									</Grid.Styles>

									<Border Name="DragMeCustom"
											Classes="drag"
											Grid.Row="1"
											Grid.Column="0">
										<TextBlock>
											Drag Me (Custom Format)
										</TextBlock>
									</Border>
									<Border Name="MoveTarget"
											Classes="drop"
											Grid.Row="1"
											Grid.Column="1"
											DragDrop.AllowDrop="True">
										<TextBlock>
											Drop here (Move effect)
										</TextBlock>
									</Border>
								</Grid>
							</DockPanel>

							<!-- Your content here -->
						</StackPanel>
					</DockPanel>
					
					

				</StackPanel>
			</ScrollViewer>

			<!-- //////////TEMPORARY////////// -->
		</Grid>
	
		
</DockPanel>
</Window>